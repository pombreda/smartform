<?xml version="1.0" encoding="utf-8"?>
<!--
/*
#
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the MIT License as found 
# in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/mit-license.php.
#
# This program is distributed in the hope that it will be useful, but
# without any waranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the MIT License for full details.
*/
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 

               xmlns:smartform="http://www.rpath.com/raf/2009/smartform"

               minWidth="955" minHeight="600">
    
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    
    <fx:Declarations>
        
        <fx:XML id="launch_ec2_metadata" source="/data/test/launch_ec2.xml" />
        <fx:XML id="launch_vsphere_metadata" source="/data/test/launch_vsphere.xml" />
        <fx:XML id="configure_ec2_metadata" source="/data/test/configure_ec2.xml" />
        <fx:XML id="configure_vsphere_metadata" source="/data/test/configure_vsphere.xml" />
        <fx:XML id="single_metadata" source="/data/test/single.xml" />
        <fx:XML id="double_metadata" source="/data/test/double.xml" />
        <fx:XML id="booltest_metadata" source="/data/test/booltest.xml" />
        <fx:XML id="conditional_metadata" source="/data/test/conditional.xml" />
        <fx:XML id="large_metadata" source="/data/test/large.xml" />
        <fx:XML id="complex_metadata" source="/data/test/complex.xml" />
        
        <mx:ArrayCollection id="tests">
            <fx:Object label="" test="" />
            <fx:Object label="Single" test="single_metadata" />
            <fx:Object label="Double" test="double_metadata" />
            <fx:Object label="Booltest" test="booltest_metadata" />
            <fx:Object label="Large" test="large_metadata" />
            <fx:Object label="Conditional" test="conditional_metadata" />
            <fx:Object label="Complex" test="complex_metadata" />

            <fx:Object label="Launch EC2" test="launch_ec2_metadata" />
            <fx:Object label="Launch vsphere" test="launch_vsphere_metadata" />
            <fx:Object label="Configure EC2" test="configure_ec2_metadata" />
            <fx:Object label="Configure vsphere" test="configure_vsphere_metadata" />
        </mx:ArrayCollection>
        
    </fx:Declarations>
    
    
    <fx:Script>
<![CDATA[
    import com.rpath.xobj.XObjXMLDecoder;
    import com.rpath.xobj.XObjXMLEncoder;
    
    import mx.events.PropertyChangeEvent;
    
    [Bindable]    
    public var metadata:XML;
    
    [Bindable]
    public function get testObject():TestObject
    {
        return _testObject;
    }
    
    private var _testObject:TestObject;
    
    public function set testObject(s:TestObject):void
    {
        if (_testObject)
        {
            _testObject.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, getObjectXML);
        }
        
        _testObject = s;
        
        if (_testObject)
        {
            _testObject.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, getObjectXML);
        }
    }
    
    
    public function creationComplete():void
    {
        // start with a fresh testObject
        testObject = new TestObject();
        setMetadata(tests[0].test);
    }
    
    
    public function editMetadata(event:Event):void
    {
        try { metadata = new XML(mdInput.text); } catch (e:Error) {}
        getObjectXML();
    }
    
    private var _objectXML:String;
    private var refreshingXML:Boolean;
    
    public var oldTestObject:*;
    
    [Bindable]
    public function set objectXML(xml:String):void
    {
        _objectXML = xml;
        
        if (!refreshingXML)
        {
            try
            {
                var xmlNode:XMLNode = new XMLDocument(xml);
                var xmlDecoder:XObjXMLDecoder = new XObjXMLDecoder({foo:TestObject});
                var newObject:*;
                
                // force decoding
                oldTestObject = testObject;
                newObject = xmlDecoder.decodeXML(xmlNode).foo;
                testObject = newObject;
                testObject.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, getObjectXML);
                // force a refresh now
                getObjectXML();
            }
            catch (e:Error)
            { }
        }
    }
    
    public function get objectXML():String
    {
        return _objectXML;
    }
    
    public function getObjectXML(event:PropertyChangeEvent=null):void
    {
        refreshingXML = true;
        
        var myXML:XMLDocument = new XMLDocument();
        var xmlEncoder:XObjXMLEncoder = new XObjXMLEncoder({foo:TestObject}, myXML);
        var xmlNode:XMLNode;
        var newXML:String;
        
        xmlNode = xmlEncoder.encodeValue(testObject,new QName("local","foo"),new XMLNode(5,"root"));
        newXML = new XML(xmlNode.toString()).toString();
        objectXML = newXML;
        refreshingXML = false;
    }
    
    [Bindable]
    public var formIsValid:Boolean;
    
    private function setMetadata(name:String):void
    {
        metadata = this[name];
    }
    
    public function handleTestChange(event:Event):void
    {
        var testId:String = testSelector.selectedItem.test;
        setMetadata(testId);
        
        // start with a fresh testObject
        testObject = new TestObject();
    }
    
]]>
    </fx:Script>
    
    <mx:HDividedBox width="100%" height="100%">
        <mx:VDividedBox width="70%" height="100%" verticalScrollPolicy="off">
            
            <s:VGroup width="100%" height="40%">
                <mx:FormItem label="Field Set" >
                    <mx:ComboBox id="testSelector"
                                 dataProvider="{tests}" change="handleTestChange(event)" />
                </mx:FormItem>
                <mx:CheckBox id="editableCheck" label="EDITABLE" selected="true"/>
                <mx:CheckBox id="isValid" label="VALID?" selected="{infoForm.isValid}"/>
                <mx:CheckBox id="isDirty" label="DIRTY?" selected="{infoForm.isDirty}"/>
                <mx:TextArea id="mdInput" width="100%" height="100%" text="{metadata}" change="editMetadata(event)" />
                <s:Button label="pop errors" click="infoForm.showErrors()" />
                <s:Button label="hide errors" click="infoForm.hideErrors()" />
            </s:VGroup>
            
            <!--<s:Scroller width="100%" height="60%">
                <s:VGroup>  // does not work until ErrorTipManager can handle SPARK scrolling
            // events (via PropertYChange rather than SCROLL events 
            -->
            <mx:VBox width="100%" height="60%"
                     verticalScrollPolicy="auto"
                     horizontalScrollPolicy="off"
                     >
                
                <smartform:SmartForm id="infoForm" editable="{editableCheck.selected}"
                                     metadata="{metadata}" data="{testObject}"
                                     defaultButton="{okButton}"
                                     />
                
                <s:HGroup width="100%">
                    <s:Button label="Cancel" />
                    <s:Label id="warningLabel" text="Please complete required fields" 
                             visible="{!infoForm.isValid}" 
                             color="blue"
                             click="infoForm.showErrors()"/>
                    
                    <!-- TODO: make this enable/disabled automatically -->
                    <s:Button id="okButton" label="OK" />
                </s:HGroup>
                
                
            </mx:VBox>
<!--                </s:VGroup>
            </s:Scroller>-->
        </mx:VDividedBox>
        <s:VGroup height="100%">
            <s:Button label="REFRESH" click="getObjectXML()"/>
            <s:TextArea id="objView" text="{objectXML}" height="100%" change="{objectXML = objView.text}"/>
       </s:VGroup>
    </mx:HDividedBox>
    
</s:Application>
