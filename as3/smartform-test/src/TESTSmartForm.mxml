<?xml version="1.0" encoding="utf-8"?>
<!--
/*
#
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the MIT License as found 
# in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/mit-license.php.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the MIT License for full details.
*/
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               
               xmlns:smartform="http://www.rpath.com/2009/smartform.mxml"
               
               minWidth="955" minHeight="600">
    
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    
    <fx:Declarations>
        
        <fx:XML id="launch_ec2_metadata" source="/data/test/launch_ec2.xml" />
        <fx:XML id="launch_vsphere_metadata" source="/data/test/launch_vsphere.xml" />
        <fx:XML id="configure_ec2_metadata" source="/data/test/configure_ec2.xml" />
        <fx:XML id="configure_vsphere_metadata" source="/data/test/configure_vsphere.xml" />
        <fx:XML id="single_metadata" source="/data/test/single.xml" />
        <fx:XML id="double_metadata" source="/data/test/double.xml" />
        <fx:XML id="booltest_metadata" source="/data/test/booltest.xml" />
        <fx:XML id="conditional_metadata" source="/data/test/conditional.xml" />
        <fx:XML id="large_metadata" source="/data/test/large.xml" />
        <fx:XML id="complex_metadata" source="/data/test/complex.xml" />
        <fx:XML id="msi_conditional" source="/data/test/msi_conditional.xml" />
        <fx:XML id="nasty_vmware_test" source="/data/test/nasty_vmware_test.xml" />
        
        <mx:ArrayCollection id="tests">
            <fx:Object label="" test="" />
            <fx:Object label="Single" test="single_metadata" />
            <fx:Object label="Double" test="double_metadata" />
            <fx:Object label="Booltest" test="booltest_metadata" />
            <fx:Object label="Large" test="large_metadata" />
            <fx:Object label="Conditional" test="conditional_metadata" />
            <fx:Object label="Complex" test="complex_metadata" />
            
            <fx:Object label="Launch EC2" test="launch_ec2_metadata" />
            <fx:Object label="Launch vsphere" test="launch_vsphere_metadata" />
            <fx:Object label="Configure EC2" test="configure_ec2_metadata" />
            <fx:Object label="Configure vsphere" test="configure_vsphere_metadata" />
            <fx:Object label="MSI Conditional" test="msi_conditional" />
            <fx:Object label="Nasty VMWare Test" test="nasty_vmware_test" />
        </mx:ArrayCollection>
        
    </fx:Declarations>
    
    
    <fx:Script>
    <![CDATA[
        import com.rpath.raf.views.EditFieldPanel;
        import com.rpath.raf.models.Descriptor;
        import com.rpath.xobj.XObjQName;
        import com.rpath.xobj.XObjXMLDecoder;
        import com.rpath.xobj.XObjXMLEncoder;
        
        import mx.core.IFlexDisplayObject;
        import mx.events.PropertyChangeEvent;
        import mx.managers.PopUpManager;
        
        [Bindable]
        public var descriptorString:String;
        
        [Bindable]
        public function get metadata():XML
        {
            return _metadata;
        }
        
        private var _metadata:XML;

        public function set metadata(value:XML):void
        {
            _metadata = value;
            
            XML.prettyIndent = 2;
            XML.prettyPrinting = true;

            descriptorString = value.toXMLString();
            
            // try parsing into a new Descriptor structure...
            var xmlNode:XMLNode = new XMLDocument(_metadata);
            var xmlDecoder:XObjXMLDecoder = new XObjXMLDecoder({descriptor:Descriptor});
            
            // force decoding
            oldTestObject = testObject;
            
            var decode:* = xmlDecoder.decodeXML(xmlNode);
            formDescriptor = decode.root as Descriptor;
        }
        
        
        [Bindable]
        public var smartFormDescriptor:Descriptor;
        
        [Bindable]
        public function get testObject():TestObject
        {
            return _testObject;
        }
        
        private var _testObject:TestObject = new TestObject();
        
        public function set testObject(s:TestObject):void
        {
            if (_testObject)
            {
                _testObject.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, getObjectXML);
            }
            
            _testObject = s;
            
            if (_testObject)
            {
                _testObject.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, getObjectXML);
            }
        }
        
        
        public function creationComplete():void
        {
            // start with a fresh testObject
            testObject = new TestObject();
            setMetadata(tests[0].test);
        }
        
        
        public function editMetadata(event:Event):void
        {
            setMetadataXML(new XML(mdInput.text));
        }
        
        public function setMetadataXML(newXML:XML):void
        {
            try { 
                metadata = newXML; 
            } 
            catch (e:Error)
            {
                trace("problem setting new descriptor XML");
            }
            
            getObjectXML();
        }
        
        private var _objectXML:String;
        private var refreshingXML:Boolean;
        
        public var oldTestObject:*;
        
        [Bindable]
        public function set objectXML(xml:String):void
        {
            _objectXML = xml;
            
            if (!refreshingXML)
            {
                try
                {
                    var xmlNode:XMLNode = new XMLDocument(xml);
                    var xmlDecoder:XObjXMLDecoder = new XObjXMLDecoder({foo:TestObject});
                    var newObject:*;
                    
                    // force decoding
                    oldTestObject = testObject;
                    newObject = xmlDecoder.decodeXML(xmlNode).foo;
                    testObject = newObject;
                    testObject.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, getObjectXML);
                    // force a refresh now
                    getObjectXML();
                }
                catch (e:Error)
                { }
            }
        }
        
        public function get objectXML():String
        {
            return _objectXML;
        }
        
        public function getObjectXML(event:PropertyChangeEvent=null):void
        {
            refreshingXML = true;
            
            var myXML:XMLDocument = new XMLDocument();
            var xmlEncoder:XObjXMLEncoder = new XObjXMLEncoder({foo:TestObject}, myXML);
            var xmlNode:XMLNode;
            var newXML:String;
            
            xmlNode = xmlEncoder.encodeObject(testObject);
            var strVal:String = xmlNode.toString();
            
            XML.prettyIndent = 2;
            XML.prettyPrinting = true;
            
            newXML = new XML(strVal).toXMLString();
            objectXML = newXML;
            refreshingXML = false;
        }
        
        [Bindable]
        public var formIsValid:Boolean;
        
        [Bindable]
        public var formDescriptor:Descriptor = new Descriptor();
        
        private function setMetadata(name:String):void
        {
            metadata = this[name];
        }
        
        public function handleTestChange(event:Event):void
        {
            var testId:String = testSelector.selectedItem.test;
            setMetadata(testId);
            
            // start with a fresh testObject
            testObject = new TestObject();
        }
        
        protected function handleAddField(event:MouseEvent):void
        {
            // popup a field picker panel
            
            var popup:AddFieldWindow = PopUpManager.createPopUp(this, AddFieldWindow, true) as AddFieldWindow;
            PopUpManager.centerPopUp(popup);
            popup.addEventListener("addFieldToForm", onAddFieldToForm);
        }
        
        private function onAddFieldToForm(event:Event):void
        {
            var addPanel:EditFieldPanel = event.target as EditFieldPanel;
            if (formDescriptor)
            {
                formDescriptor.dataFields.addItem(addPanel.field);
                
                var myXML:XMLDocument = new XMLDocument();
                var xmlEncoder:XObjXMLEncoder = new XObjXMLEncoder({descriptor:Descriptor}, myXML);
                
                xmlEncoder.encodeNullElements = false;
                
                var xmlNode:XMLNode;
                var newXML:XML;
                
                xmlNode = xmlEncoder.encodeObject(formDescriptor);
                newXML = new XML(xmlNode.toString());
                
                setMetadataXML(newXML);
            }
        }
        
        protected function showEditor_clickHandler(event:MouseEvent):void
        {
            var popup:SmartFormEditorWindow = PopUpManager.createPopUp(this, SmartFormEditorWindow, true) as SmartFormEditorWindow;
            
            popup.descriptorXML = metadata;
            
            PopUpManager.centerPopUp(popup);
            //popup.addEventListener("addFieldToForm", onAddFieldToForm);
            
        }
        
    ]]>
    </fx:Script>
    
    
    <mx:HDividedBox width="100%" height="100%" verticalScrollPolicy="off">
        
        <!--<s:Scroller width="100%" height="60%">
        <s:VGroup>  // does not work until ErrorTipManager can handle SPARK scrolling
        // events (via PropertYChange rather than SCROLL events 
        -->
        <s:VGroup width="100%" height="100%">
            <s:Label text="Form" />
            <s:Scroller width="100%" height="100%">
                <s:VGroup width="100%">
                    
                    <smartform:SmartForm id="infoForm" editable="{editableCheck.selected}"
                                         metadata="{metadata}" data="{testObject}"
                                         defaultButton="{okButton}"
                                         />
                    
                    <s:HGroup width="100%">
                        <s:Button label="Cancel" />
                        <s:Label id="warningLabel" text="Please complete required fields" 
                                 visible="{!infoForm.isValid}" 
                                 color="blue"
                                 click="infoForm.showErrors()"/>
                        
                        <s:Button id="okButton" label="OK" enabled="{infoForm.isValid}" />
                    </s:HGroup>
                    
                </s:VGroup>
                
            </s:Scroller>
        </s:VGroup>
        
        <s:VGroup height="100%" width="100%">
            <s:Label text="Data Object" />
            <s:TextArea id="objView" text="{objectXML}" width="100%"
                        height="100%" change="{objectXML = objView.text}"/>
            <s:Button label="REFRESH" click="getObjectXML()"/>
        </s:VGroup>
        
        <s:VGroup height="100%" width="100%">
            <s:Label text="Descriptor" />
            <mx:TextArea id="mdInput" width="100%" height="100%" text="{descriptorString}" change="editMetadata(event)" />
        </s:VGroup>
    </mx:HDividedBox>
    
    <s:HGroup width="100%" bottom="0">
        <mx:FormItem label="Load Descriptor" >
            <mx:ComboBox id="testSelector"
                         dataProvider="{tests}" change="handleTestChange(event)" />
        </mx:FormItem>
        <s:Button label="Add Field" click="handleAddField(event)"/>
        <mx:CheckBox id="editableCheck" label="EDITABLE" selected="true"/>
        <mx:CheckBox id="isValid" label="VALID?" selected="{infoForm.isValid}"/>
        <mx:CheckBox id="isDirty" label="DIRTY?" selected="{infoForm.isDirty}"/>
        <s:Button label="pop errors" click="infoForm.showErrors()" />
        <s:Button label="hide errors" click="infoForm.hideErrors()" />
        <s:Button id="showEditor" label="Show Editor" click="showEditor_clickHandler(event)" />
    </s:HGroup>
    
</s:Application>
