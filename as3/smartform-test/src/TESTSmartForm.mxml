<?xml version="1.0" encoding="utf-8"?>
<!--
/*
#
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the MIT License as found 
# in a file called LICENSE. If it is not present, the license
# is always available at http://www.opensource.org/licenses/mit-license.php.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the MIT License for full details.
*/
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               
               xmlns:smartform="http://www.rpath.com/2009/smartform.mxml"
               
               width="100%" height="100%"
               
               creationComplete="application2_creationCompleteHandler(event)"
               >
    
    <s:layout>
        <s:VerticalLayout/>
    </s:layout>
    
    
    <fx:Declarations>
        
        <s:ArrayCollection id="tests" >
            <fx:Object label="" test="" />
            <fx:Object label="Single" test="single_metadata" />
            
            <fx:Object label="Double" test="double_metadata" />
            <fx:Object label="Booltest" test="booltest_metadata" />
            <fx:Object label="Large" test="large_metadata" />
            <fx:Object label="Conditional" test="conditional_metadata" />
            <fx:Object label="Complex" test="complex_metadata" />
            <fx:Object label="Compound" test="compound" />
            <fx:Object label="Apache" test="smatform_apache" />
            <fx:Object label="Elliot Test" test="elliot_test" />
            <fx:Object label="List Type" test="list_type" />
            <fx:Object label="vhosts" test="vhosts" />
            <fx:Object label="vhosts_no_values" test="vhosts_no_values" />
            <fx:Object label="vhosts2" test="vhosts2" />
            <fx:Object label="iis_no_values" test="iis_no_values" />
            
            <fx:Object label="Conditional Launch" test="conditional_launch" />
            <fx:Object label="Launch vsphere" test="launch_vsphere_metadata" />
            <fx:Object label="Configure EC2" test="configure_ec2_metadata" />
            <fx:Object label="Configure vsphere" test="configure_vsphere_metadata" />
            <fx:Object label="MSI Conditional" test="msi_conditional" />
            <fx:Object label="Nasty VMWare Test" test="nasty_vmware_test" />
            <fx:Object label="CISCO" test="cisco" />
        </s:ArrayCollection>
        
    </fx:Declarations>
    
    
    <fx:Script>
    <![CDATA[
        import com.rpath.raf.events.HelpEvent;
        import com.rpath.xobj.XObjXMLDecoder;
        
        import flash.utils.flash_proxy;
        
        import mx.events.DynamicEvent;
        import mx.events.FlexEvent;
        
        public var descriptors:TestDescriptors = new TestDescriptors();
        public var values:TestValues = new TestValues();
        
        [Bindable]
        public var testObject:TestObject = new TestObject();
        
        [Bindable]
        public function get metadata():XML
        {
            return _metadata;
        }
        
        private var _metadata:XML;
        
        public function set metadata(value:XML):void
        {
            _metadata = value;
        }
        
        public function setMetadataXML(newXML:XML):void
        {
            try { 
                metadata = newXML; 
            } 
            catch (e:Error)
            {
                trace("problem setting new descriptor XML");
            }
            
        }
        
        private var _dataXML:XML;
        
        public function set dataXML(value:XML):void
        {
            _dataXML = value;
            
            // now try and turn it back into a regular data object...
            var decoder:XObjXMLDecoder = new XObjXMLDecoder();
            var newDataObject:TestObject = new TestObject();
            var result:Object = decoder.decodeRawXMLInto(_dataXML, newDataObject);
            
            testObject = newDataObject;
        }
        
        public function setDataXML(newXML:XML):void
        {
            try { 
                _dataXML = newXML; 
            } 
            catch (e:Error)
            {
                trace("problem setting new values XML");
            }
            
        }

        private function setMetadata(name:String):void
        {
            metadata = descriptors[name];
        }
        
        private function setData(name:String):void
        {
            try
            {
                dataXML = values[name];
            }
            catch (e:Error)
            {
                dataXML = <values/>
            }
        }
        
        
        public function handleTestChange(event:Event):void
        {
            var testId:String = testSelector.selectedItem.test;
            setMetadata(testId);
            setData(testId);
        }
        
        
        protected function cancelButton_clickHandler(event:MouseEvent):void
        {
            // fresh object
            testObject = new TestObject();
        }
        
        
        protected function editDescriptorXMLHandler(event:DynamicEvent):void
        {
            metadata = event.xml;
        }
        
        protected function editDataXMLHandler(event:DynamicEvent):void
        {
            dataXML = event.xml;
         }
        

        protected function handleHelp(event:HelpEvent):void
        {
            if (event.uri)
            {
                var url:URLRequest = new URLRequest(event.uri);
                var windowId:String = '_blank' + event.uri;
                navigateToURL(url, windowId);
            }
        }
        
        protected function application2_creationCompleteHandler(event:FlexEvent):void
        {
            infoForm.addEventListener(HelpEvent.SHOW_HELP, handleHelp,false,0,true);
        }
        
    ]]>
    </fx:Script>
    
    
    <s:HGroup width="100%" top="0">
        <mx:FormItem label="Load Descriptor" >
            <mx:ComboBox id="testSelector"
                         dataProvider="{tests}" change="handleTestChange(event)" />
        </mx:FormItem>
        <mx:CheckBox id="editableCheck" label="EDITABLE" selected="true"/>
        <mx:CheckBox id="isValid" label="VALID?" selected="{infoForm.isValid}"/>
        <mx:CheckBox id="isDirty" label="DIRTY?" selected="{infoForm.isDirty}"/>
        <s:Button label="pop errors" click="infoForm.smartform.showErrors()" />
        <s:Button label="hide errors" click="infoForm.smartform.hideErrors()" />
    </s:HGroup>
    
    <mx:TabNavigator id="nav" width="100%" height="100%">
        
        <s:NavigatorContent id="formNav" label="Form" 
                            width="100%" height="100%">
            
            <smartform:SmartFormEditor id="infoForm" 
                                       enableFormDefinitionEditing="{editableCheck.selected}"
                                       descriptorXML="@{metadata}" data="{testObject}"
                                       defaultButton="{okButton}"
                                       height="100%" width="100%"
                                       />
            
        </s:NavigatorContent>
        
        <s:NavigatorContent id="descNav" label="Descriptor XML" 
                            width="100%" height="100%"
                            show="{descriptorView.updateDescriptorXML()}"
                            >
            
            <smartform:DescriptorXMLView id="descriptorView" 
                                         descriptorXML="{metadata}" 
                                         width="100%" height="100%"
                                         editable="{editableCheck.selected}"
                                         editDescriptorXML="editDescriptorXMLHandler(event)"
                                         />
            
            
        </s:NavigatorContent>
        
        <s:NavigatorContent id="resultNav" label="Result XML" 
                            width="100%" height="100%"
                            show="{dataView.updateDataXML()}"
                            >
            
            <smartform:DataXMLView id="dataView" data="{testObject}" 
                                   width="100%" height="100%"
                                   editDataXML="editDataXMLHandler(event)"/>
            
        </s:NavigatorContent>
        
    </mx:TabNavigator>
    
    <s:HGroup width="100%">
        <s:Button id="cancelButton" label="Cancel" click="cancelButton_clickHandler(event)"/>
        <s:Label id="warningLabel" text="Please complete required fields" 
                 visible="{!infoForm.isValid}" 
                 color="blue"
                 click="infoForm.smartform.showErrors()"/>
        
        <s:Button id="okButton" label="OK" enabled="{infoForm.isValid}" />
    </s:HGroup>
    
    
</s:Application>
