<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2009-2011 rPath, Inc.

This program is distributed under the terms of the MIT License as found 
in a file called LICENSE. If it is not present, the license
is always available at http://www.opensource.org/licenses/mit-license.php.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of merchantability
or fitness for a particular purpose. See the MIT License for full details.
-->


<s:Group 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    
    xmlns:smartform="http://www.rpath.com/2009/smartform.mxml"
    xmlns:views="com.rpath.raf.views.*" 
    >
    
    
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <fx:Script>
    <![CDATA[
        import com.rpath.raf.models.Descriptor;
        import com.rpath.raf.models.FieldDescriptor;
        
        import mx.core.IFlexDisplayObject;
        import mx.events.DynamicEvent;
        import mx.events.IndexChangedEvent;
        
        [Bindable]
        public function get formDescriptor():Descriptor
        {
            return _formDescriptor;
        }
        
        private var _formDescriptor:Descriptor = new Descriptor();
        private var _formDescriptorChanged:Boolean;
        
        public function set formDescriptor(value:Descriptor):void
        {
            _formDescriptor = value;
            _formDescriptorChanged = true;
            invalidateProperties();
            
            descriptorXML = _formDescriptor.asXML();
        }
        
        
        [Bindable]
        public var isValid:Boolean;
        
        [Bindable]
        public var isDirty:Boolean;
        
        [Bindable]
        public var editable:Boolean;
        
        [Bindable]
        public var defaultButton:IFlexDisplayObject;
        
        [Bindable]
        public function get descriptorXML():XML
        {
            return _metadata;
        }
        
        private var _metadata:XML;
        
        public function set descriptorXML(value:XML):void
        {
            _metadata = value;
            
            if (!_formDescriptorChanged)
            {
                formDescriptor = Descriptor.fromXML(_metadata);
            }
        }
        
        
        [Bindable]
        public var data:* = {};
        
        private function recomputeDescriptorXML():void
        {
            descriptorXML = formDescriptor.asXML();
        }
        
        protected function handleAddField(event:MouseEvent):void
        {
            // popup a field picker panel
            var newField:FieldDescriptor = new FieldDescriptor();
            formDescriptor.dataFields.addItem(newField);
            
            elementGrid.selectedItem = newField;
            // How to do this?
            //elementGrid.ensureCellIsVisible(elementGrid.selectedIndex);
        }
        
        /* private function onAddFieldToForm(event:Event):void
        {
        var addPanel:AddFieldPanel = event.target as AddFieldPanel;
        
        if (formDescriptor)
        {
        formDescriptor.dataFields.addItem(addPanel.field);
        recomputeMetadataXML();
        }
        } */
        
        protected function handleRemoveField(event:MouseEvent):void
        {
            var elem:FieldDescriptor = elementGrid.selectedItem as FieldDescriptor;
            if (elem)
            {
                formDescriptor.dataFields.removeItemIfPresent(elem);
                recomputeDescriptorXML();
            }
        }
        
        protected function editDescriptorXMLHandler(event:DynamicEvent):void
        {
            descriptorXML = event.xml;
        }
        
        protected function editDataXMLHandler(event:DynamicEvent):void
        {
            var dataXML:XML = event.xml;
            
            // now try and turn it back into a regular data object...
        }
        
        protected function navigator_changeHandler(event:IndexChangedEvent):void
        {
            if (navigator.selectedChild == formNav)
            {
                // tickle form to recompute
                recomputeDescriptorXML();
            }
            else if (navigator.selectedChild == descNav)
            {
                // tickle form to recompute
                recomputeDescriptorXML();
            }
            else if (navigator.selectedChild == resultNav)
            {
                dataView.updateDataXML();
            }
        }
        
        override protected function commitProperties():void
        {
            if (_formDescriptorChanged)
            {
                _formDescriptorChanged = false;
            }
            
            super.commitProperties();
        }
        
    ]]>
    </fx:Script>
    
    
    <mx:TabNavigator id="navigator" width="100%" height="100%"
                     change="navigator_changeHandler(event)">
        
        <s:NavigatorContent id="formNav" label="Form"
                            width="100%" height="100%">
            
            <s:Scroller width="100%" height="100%">
                <s:VGroup width="100%">
                    
                    <smartform:SmartForm id="smartform"
                                         metadata="{descriptorXML}" 
                                         data="{data}"
                                         defaultButton="{defaultButton}"
                                         isValid="@{isValid}"
                                         isDirty="@{isDirty}"
                                         />
                    
                </s:VGroup>
                
            </s:Scroller>
        </s:NavigatorContent>
        
        <s:NavigatorContent label="Elements" 
                            width="100%" height="100%">
            
            <s:layout>
                <s:VerticalLayout />
            </s:layout>
            
            <mx:AdvancedDataGrid
                id="elementGrid"
                dataProvider="{formDescriptor.dataFields}" 
                width="100%" height="100%"
                editable="true"
                >
                <mx:columns>
                    <mx:AdvancedDataGridColumn headerText="Description" dataField="descriptions" 
                                               editable="false"/>
                    <mx:AdvancedDataGridColumn headerText="Property" dataField="name" editable="true"/>
                    <mx:AdvancedDataGridColumn headerText="Type" dataField="type" editable="false"/>
                    <mx:AdvancedDataGridColumn headerText="Prompt" dataField="prompt" editable="false"/>
                    <mx:AdvancedDataGridColumn headerText="Required?" dataField="required" editable="false"/>
                </mx:columns>
            </mx:AdvancedDataGrid>
            
            <s:HGroup width="100%">
                <s:Button label="Add Field" click="handleAddField(event)"/>
                <s:Button label="Remove Field" click="handleRemoveField(event)"
                          enabled="{elementGrid.selectedItem != null}"/>
                
            </s:HGroup>
            
            <views:EditFieldPanel id="editFieldPanel" field="{elementGrid.selectedItem as FieldDescriptor}" 
                                  height="250%"
                                  width="100%"
                                  includeInLayout="{elementGrid.selectedItem != null}"
                                  visible="{editFieldPanel.includeInLayout}"
                                  />
            
        </s:NavigatorContent>
        
        <s:NavigatorContent id="descNav" label="Descriptor XML" 
                            width="100%" height="100%">
            
            <views:DescriptorXMLView descriptorXML="{descriptorXML}" 
                                     width="100%" height="100%"
                                     editDescriptorXML="editDescriptorXMLHandler(event)"/>
            
            
        </s:NavigatorContent>
        
        <s:NavigatorContent id="resultNav" label="Result XML" 
                            width="100%" height="100%"
                            >
            
            <views:DataXMLView id="dataView" data="{data}" 
                               width="100%" height="100%"
                               editDataXML="editDataXMLHandler(event)"/>
            
        </s:NavigatorContent>
        
    </mx:TabNavigator>
</s:Group>
