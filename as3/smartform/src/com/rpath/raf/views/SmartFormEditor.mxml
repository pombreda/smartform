<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2009-2011 rPath, Inc.

This program is distributed under the terms of the MIT License as found 
in a file called LICENSE. If it is not present, the license
is always available at http://www.opensource.org/licenses/mit-license.php.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of merchantability
or fitness for a particular purpose. See the MIT License for full details.
-->


<s:Group 
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    
    xmlns:smartform="http://www.rpath.com/2009/smartform.mxml"
    xmlns:views="com.rpath.raf.views.*"
    
    xmlns:controls="com.rpath.raf.controls.*"
    >
    
    <!-- TODO: why can't the backgroundColor be cascaded from loaded style sheets
    in the app???? -->
    
    <fx:Metadata>
        [Event(name="clearedForm", type="mx.events.DynamicEvent")]
    </fx:Metadata>
    
    <fx:Declarations>
    </fx:Declarations>
    
    <fx:Script>
    <![CDATA[
        import com.rpath.raf.models.ConstraintDescriptor;
        import com.rpath.raf.models.Description;
        import com.rpath.raf.models.DescriptionEntry;
        import com.rpath.raf.models.Descriptor;
        import com.rpath.raf.models.FieldDescriptor;
        import com.rpath.raf.models.SectionDescriptor;
        
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.core.IFlexDisplayObject;
        import mx.events.DynamicEvent;
        import mx.events.FlexEvent;
        import mx.events.IndexChangedEvent;
        import mx.managers.PopUpManager;
        
        import spark.components.Button;
        import spark.components.PopUpAnchor;
        
        [Bindable]
        public var isValid:Boolean;
        
        [Bindable]
        public var isDirty:Boolean;
        
        [Bindable]
        public var editable:Boolean;
        
        [Bindable]
        public var enableFormDefinitionEditing:Boolean;
        
        [Bindable]
        public function get formDescriptor():Descriptor
        {
            return _formDescriptor;
        }
        
        private var _formDescriptor:Descriptor;
        private var _formDescriptorChanged:Boolean;
        
        public function set formDescriptor(value:Descriptor):void
        {
            if (_formDescriptor)
            {
                _formDescriptor.removeEventListener("dataFieldsChange", handleDescriptorChanged);
            }
            
            _formDescriptor = value;
            
            if (_formDescriptor)
            {
                _formDescriptor.addEventListener("dataFieldsChange", handleDescriptorChanged);
            }
            
            if (!_metadataChanged)
            {
                _formDescriptorChanged = true;
                invalidateProperties();
            }
        }
        
        protected function handleDescriptorChanged(event:Event):void
        {
            recomputeDescriptorXML();
        }
        
        [Bindable]
        public function get descriptorXML():XML
        {
            return _metadata;
        }
        
        private var _metadata:XML;
        private var _metadataChanged:Boolean;
        
        public function set descriptorXML(value:XML):void
        {
            _metadata = value;
            if (!_formDescriptorChanged)
            {
                _metadataChanged = true;
                invalidateProperties();
            }
        }
        
        [Bindable]
        public var data:* = {};
        
        private function recomputeDescriptorXML():void
        {
            if (!_metadataChanged)
            {
                _formDescriptorChanged = true;
                invalidateProperties();
            }
        }
        
        
        public function addField(section:Object=null):void
        {
            if (!formDescriptor)
                formDescriptor = new Descriptor();
            
            var newField:FieldDescriptor = new FieldDescriptor();
            
            if (section)
            {
                newField.section = new SectionDescriptor();
                newField.section.key = section.key;
                newField.section.descriptions.first = section.value;
            }
            
            currentField = newField;
            adding = true;
            editCurrentField();
        }
        
        protected function handleAddField(event:MouseEvent):void
        {
            addField();
        }
        
        protected function handleEditField(event:MouseEvent):void
        {
            if (currentField)
            {
                editCurrentField();
            }
        }
        
        
        [Bindable]
        protected var adding:Boolean;
        
        
        [Bindable]
        public function get editing():Boolean
        {
            return _editing;
        }
        
        private var _editing:Boolean;
        private var _editingChanged:Boolean;
        
        public function set editing(value:Boolean):void
        {
            _editing = value;
            _editingChanged = true;
            invalidateProperties();
        }
        
        
        override protected function commitProperties():void
        {
            if (_editingChanged)
            {
                _editingChanged = false;
                if (!editing)
                {
                    // wipe currentField immediately to allow re-set 
                    currentField = null;
                    
                    PopUpManager.removePopUp(callout);
                }
            }
            
            if (_formDescriptorChanged)
            {
                if (!editing)
                {
                    descriptorXML = formDescriptor ? formDescriptor.asXML() : null;
                    _formDescriptorChanged = false;
                }
            }
            
            if (_metadataChanged)
            {
                formDescriptor = Descriptor.fromXML(_metadata);
                _metadataChanged = false;
            }
            
            super.commitProperties();
        }
        
        
        private var _anchor:PopUpAnchor;
        
        [Bindable]
        protected var currentField:FieldDescriptor;
        
        [Bindable]
        protected var currentFormItem:SmartFormItem;
        
        [Bindable]
        protected var editButton:spark.components.Button;
        
        protected function smartform_editSmartFormItemHandler(event:DynamicEvent):void
        {
            currentFormItem = event.formItem;
            currentField = event.field;
            editButton = event.selectedItem;
            
            _anchor = event.anchor;
            
            // and immediately enter edit mode with popup
            editCurrentField();
        }
        
        protected function smartform_selectSmartFormItemHandler(event:DynamicEvent):void
        {
            if (editing)
            {
                stopEditing();
            }
            
            currentFormItem = event.formItem;
            currentField = event.field;
            
            _anchor = event.anchor;
        }
        
        protected function smartform_deleteSmartFormItemHandler(event:DynamicEvent):void
        {
            
            var confirm:Function = function():void
            {
                currentFormItem = event.formItem;
                currentField = event.field;
                if (editing)
                {
                    stopEditing();
                }
                removeCurrentField();
            };
            
            var removeEvent:DynamicEvent = new DynamicEvent("removePropertyField", true, true);
            removeEvent.originEvent = event;
            removeEvent.yesButtonEvent = confirm;
            dispatchEvent(removeEvent);
            
        }
        
        protected function smartform_addSmartFormItemHandler(event:DynamicEvent):void
        {
            var section:Object = event.section;
            
            addField(section);
        }
        
        protected function handleCancelEditingFormItem(event:DynamicEvent):void
        {
            if (adding)
            {
                adding = false;
                handleDeleteCurrentFormItem(event);
            }
            else
            {
                stopEditing();
            }
        }
        
        protected function handleDeleteCurrentFormItem(event:DynamicEvent):void
        {
            if (editing)
            {
                stopEditing();
            }
            
            removeCurrentField();
        }
        
        protected function handleStopEditingCurrentFormItem(event:DynamicEvent):void
        {
            if (adding)
            {
                adding = false;
                formDescriptor.dataFields.addItem(currentField);
            }
            stopEditing();
        }        
        
        protected function removeCurrentField():void
        {
            if (currentField)
            {
                formDescriptor.dataFields.removeItemIfPresent(currentField);
                if (formDescriptor.dataFields.length == 0)  // no fields means null the descriptor completely
                    formDescriptor = null;
                editing = false;
            }
        }
        
        protected var callout:SmartFormEditFieldPanel;
        
        protected function editCurrentField():void
        {
            callout =  new SmartFormEditFieldPanel();
            callout.currentField = currentField;
            callout.adding = adding;
            callout.currentFormDescriptor = formDescriptor;
            callout.addEventListener("cancelCurrentSmartFormItem", handleCancelEditingFormItem);
            callout.addEventListener("stopEditingCurrentFormItem", handleStopEditingCurrentFormItem);
            
            PopUpManager.addPopUp(callout, FlexGlobals.topLevelApplication as DisplayObject, false);
            PopUpManager.centerPopUp(callout);
            editing = true;
        }
        
        protected function stopEditing():void
        {
            editing = false;
        }
        
        protected function navigator_changeHandler(event:IndexChangedEvent):void
        {
            editing = false;
            recomputeDescriptorXML();
        }
        
        [Bindable]
        public var defaultButton:IFlexDisplayObject;
        
        private function clearForm(event:Event):void
        {
            dispatchEvent(new DynamicEvent("clearedForm"));
        }
        
    ]]>
    </fx:Script>
    
    <smartform:SmartFormBorderGraphic top="0" left="0" bottom="0" right="0" styleName="smartform_background" />
    
    <s:VGroup id="formNav" width="100%" height="100%" paddingTop="8" paddingRight="8" paddingBottom="8" paddingLeft="8">
        <s:HGroup enabled="{!editing}" width="100%">
            <!--<s:Button label="Add" 
                      toolTip="Add property" 
                      width="16" height="16"
                      useHandCursor="true"
                      buttonMode="true"
                      skinClass="com.rpath.raf.skins.IconButtonSkin"
                      icon="@Embed(source='/assets/images/add.png')"
                      click="handleAddField(event)"/>-->
            <controls:SmartFormButton label="Add property" 
                                      toolTip="Add property"
                                      click="handleAddField(event)"
                                      />
                
        </s:HGroup>
        
        <s:Scroller width="100%" height="100%">
            <s:Group width="100%">
                
                <smartform:SmartForm id="smartform"
                                     width="100%"
                                     metadata="{descriptorXML}" 
                                     formDescriptor="{formDescriptor}"
                                     data="{data}"
                                     defaultButton="{defaultButton}"
                                     isValid="@{isValid}"
                                     isDirty="@{isDirty}"
                                     editSmartFormItem="smartform_editSmartFormItemHandler(event)"
                                     selectSmartFormItem="smartform_selectSmartFormItemHandler(event)"
                                     deleteSmartFormItem="smartform_deleteSmartFormItemHandler(event)"
                                     addSmartFormItem="smartform_addSmartFormItemHandler(event)"
                                     enableFormDefinitionDelete="{enableFormDefinitionEditing}"
                                     enabled="{!editing}"
                                     enableFormDefinitionEditing="{enableFormDefinitionEditing}"
                                     />
                
                
            </s:Group>
        </s:Scroller>
        
        <s:HGroup width="100%" horizontalAlign="right">
            <controls:SmartFormButton id="clearButton"
                                      toolTip="Clear"
                                      label="Clear"
                                      enabled="{enableFormDefinitionEditing}"
                                      includeInLayout="{enableFormDefinitionEditing}"
                                      visible="{enableFormDefinitionEditing}"
                                      click="clearForm(event)"
                                      />
        </s:HGroup>
        
    </s:VGroup>
</s:Group>
