<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/halo" 
         >
    <fx:Metadata>
        [Style(name="backgroundColor", inherit="no", type="uint")]
        [Style(name="borderColor", inherit="no", type="uint")]
        [Style(name="cornerRadius", inherit="no", type="Number")]
        [Style(name="bottomRadius", inherit="no", type="Number")]
        [Style(name="blendType", inherit="no", type="String")]
        [Style(name="hideInnerBorder", inherit="no", type="Boolean")]
        [Style(name="hideOuterBorder", inherit="no", type="Boolean")]
        
    </fx:Metadata>
    <fx:Script>
        <![CDATA[
            import mx.core.FlexGlobals;
            
            [Bindable]
            public var backgroundColor:uint;
            
            [Bindable]
            public var borderColor:uint;
            
            [Bindable]
            public var cornerRadius:Number = 0;
            
            [Bindable]
            public var bottomRadius:Number = 0;
            
            [Bindable]
            public var blendType:String = "normal";
            
            [Bindable]
            public var hideInnerBorder:Boolean;
            
            [Bindable]
            public var hideOuterBorder:Boolean;
            
            private var _stylePropChanged:Boolean = true;
            
            private static var classConstructed:Boolean = classConstruct();
            
            private static function classConstruct():Boolean 
            {
                if (!FlexGlobals.topLevelApplication.styleManager.getStyleDeclaration("com.rpath.graphics.RBorderGraphic"))
                {
                    var rectStyles:CSSStyleDeclaration = new CSSStyleDeclaration();
                    rectStyles.defaultFactory = function():void
                    {
                        this.backgroundColor = 0xffffff;
                        this.borderColor = 0xefefef;
                        this.cornerRadius = 0;
                        this.bottomRadius = 0;
                        this.blendType = "normal";
                    }
                    FlexGlobals.topLevelApplication.styleManager.setStyleDeclaration("com.rpath.graphics.RBorderGraphic", rectStyles, true);
                }
                return true;
            }
            
            
            override public function styleChanged(styleProp:String):void 
            {
                super.styleChanged(styleProp);
                
                if (styleProp == null || styleProp == "styleName")
                {
                    _stylePropChanged = true; 
                    invalidateDisplayList();
                    return;
                }
            }
            
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void 
            {
                if (_stylePropChanged == true) 
                {
                    _stylePropChanged = false;
                    
                    backgroundColor = getStyle("backgroundColor");
                    borderColor = getStyle("borderColor");
                    cornerRadius = getStyle("cornerRadius") > 0 ? getStyle("cornerRadius") : 0;
                    bottomRadius = getStyle("bottomRadius") > 0 ? getStyle("bottomRadius") : 0;
                    blendType = getStyle("blendType") ? getStyle("blendType") : "normal";
                    hideInnerBorder = getStyle("hideInnerBorder") ? true : false;
                    hideOuterBorder = getStyle("hideOuterBorder") ? true : false;
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
                
                
            }
            
            
        ]]>
    </fx:Script>
    
    <s:Rect id="background" left="0" right="0" top="0" bottom="0"
            topLeftRadiusX="{cornerRadius}" topRightRadiusX="{cornerRadius}" 
            topLeftRadiusY="{cornerRadius}" topRightRadiusY="{cornerRadius}"
            bottomLeftRadiusX="{bottomRadius}" bottomRightRadiusX="{bottomRadius}" 
            bottomLeftRadiusY="{bottomRadius}" bottomRightRadiusY="{bottomRadius}"
            >
        <s:fill>
            <!--- @private -->
            <s:SolidColor id="bgFill" color="{backgroundColor}"/>
        </s:fill>
    </s:Rect>
    
    <s:Rect id="gradient" left="0" right="0" top="0" bottom="0"
            topLeftRadiusX="{cornerRadius}" topRightRadiusX="{cornerRadius}" 
            topLeftRadiusY="{cornerRadius}" topRightRadiusY="{cornerRadius}"
            bottomLeftRadiusX="{bottomRadius}" bottomRightRadiusX="{bottomRadius}" 
            bottomLeftRadiusY="{bottomRadius}" bottomRightRadiusY="{bottomRadius}"
            blendMode="{blendType}"
            >
        <s:fill>
            <s:LinearGradient rotation="90" >
                <!--				
                <s:GradientEntry color="0xcccccc" alpha="0.5" ratio="0.0" />
                <s:GradientEntry color="0xcecece" alpha="0.5" ratio="0.10" />
                <s:GradientEntry color="0xcccccc" alpha="0.5" ratio="0.33" />
                <s:GradientEntry color="0x333333" alpha="0.5" ratio="0.66" />
                <s:GradientEntry color="0x000000" alpha="0.5" ratio="0.80" />               
                <s:GradientEntry color="0xcccccc" alpha="0"/>
                <s:GradientEntry color="0xcecece" alpha="0"/>
                <s:GradientEntry color="0xcccccc" alpha=".04"/>
                <s:GradientEntry color="0x333333" alpha=".06"/>
                <s:GradientEntry color="0x333333" alpha=".1"/>
                <s:GradientEntry color="0x000000" alpha=".15"/>
                <s:GradientEntry color="0x000000" alpha=".25"/>
                -->
                <s:GradientEntry color="0x000000" alpha="0"/>
                <s:GradientEntry color="0x000000" alpha="0"/>
                <s:GradientEntry color="0x000000" alpha=".04"/>
                <s:GradientEntry color="0x000000" alpha=".06"/>
                <s:GradientEntry color="0x000000" alpha=".1"/>
                <s:GradientEntry color="0x000000" alpha=".15"/>
                <s:GradientEntry color="0x000000" alpha=".25"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <s:Rect id="border" left="0" right="0" top="0" bottom="0"
            topLeftRadiusX="{cornerRadius}" topRightRadiusX="{cornerRadius}" 
            topLeftRadiusY="{cornerRadius}" topRightRadiusY="{cornerRadius}"
            bottomLeftRadiusX="{bottomRadius}" bottomRightRadiusX="{bottomRadius}" 
            bottomLeftRadiusY="{bottomRadius}" bottomRightRadiusY="{bottomRadius}"
            visible="{!hideOuterBorder}"
            >
        <s:stroke>
            <s:SolidColorStroke id="stroke" joints="bevel" color="{borderColor}" alpha="1.0" />
        </s:stroke>
    </s:Rect>	
    
    <s:Rect id="innerBorder" left="1" right="1" top="1" bottom="1"
            topLeftRadiusX="{cornerRadius}" topRightRadiusX="{cornerRadius}" 
            topLeftRadiusY="{cornerRadius}" topRightRadiusY="{cornerRadius}"
            bottomLeftRadiusX="{bottomRadius}" bottomRightRadiusX="{bottomRadius}" 
            bottomLeftRadiusY="{bottomRadius}" bottomRightRadiusY="{bottomRadius}"
            blendMode="screen"
            visible="{!hideInnerBorder}"
            >
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1" joints="bevel">
                <s:GradientEntry color="0xcccccc" alpha="0.5" ratio="0.0" />
                <s:GradientEntry color="0x666666" alpha="0.5" ratio="0.33" />
                <s:GradientEntry color="0x333333" alpha="0.5" ratio="0.66" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
    
    
    
    
    
</s:Group>
