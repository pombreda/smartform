<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2009-2011 rPath, Inc.

This program is distributed under the terms of the MIT License as found 
in a file called LICENSE. If it is not present, the license
is always available at http://www.opensource.org/licenses/mit-license.php.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of merchantability
or fitness for a particular purpose. See the MIT License for full details.
-->

<s:ItemRenderer
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:views="com.rpath.raf.views.*"
    
    autoDrawBackground="false" 
    contentBackgroundAlpha="0"
    
    preinitialize="preinitializeHandler(event)"
    >
    
    
    <fx:Metadata>
        [Event(name="removeEnumItem", type="mx.events.FlexEvent")]
        [Event(name="checkRemoveEnumItem", type="mx.events.FlexEvent")]
    </fx:Metadata>
    
    <s:layout>
        <s:HorizontalLayout />
    </s:layout>
    
    
    <fx:Script>
    <![CDATA[
        import com.rpath.raf.models.Description;
        import com.rpath.raf.models.DescriptionEntry;
        import com.rpath.raf.models.EnumDescriptor;
        
        import mx.events.FlexEvent;
        
        [Bindable]
        public var editable:Boolean;
        
        [Bindable]
        public var showLang:Boolean;
        
        [Bindable]
        public var enumDescEntry:DescriptionEntry;
        
        [Bindable]
        public var enumEntry:EnumDescriptor;
        
        [Bindable("dataChange")]
        override public function get data():Object
        {
            return super.data;
        }
        
        override public function set data(value:Object):void
        {
            super.data = value;
            enumEntry = data as EnumDescriptor;
        }
        protected function removeButtonClick(event:MouseEvent):void
        {
            dispatchEvent(new FlexEvent("removeEnumItem",true));
        }
        
        protected function preinitializeHandler(event:FlexEvent):void
        {
            addEventListener("dataChange", onDataChange);
            addEventListener("enabledChanged", onDataChange);
        }
        
        private var _dataChanged:Boolean;
        
        private function onDataChange(event:Event):void
        {
            _dataChanged = true;
            invalidateProperties();
        }
        
        override protected function commitProperties():void
        {
            if (_dataChanged)
            {
                _dataChanged = false;
                
                if (enabled)
                    removeButton.enabled = dispatchEvent(new FlexEvent("checkRemoveEnumItem", true, true));
                else
                    removeButton.enabled = false;
                
                if (!showLang)
                {
                    // we need to pluck the first desc entry only
                    if (enumEntry)
                    {
                        if (enumEntry.descriptions.length == 0)
                        {
                            enumEntry.descriptions.addItem(new DescriptionEntry());
                        }
                        enumDescEntry = enumEntry.descriptions.getItemAt(0) as DescriptionEntry;
                    }
                }
                else
                {
                    enumDescEntry = null;
                }
            }
            super.commitProperties();
        }
        
    ]]>
    </fx:Script>
    
    <s:Button id="removeButton" label="-"  width="26"
              click="removeButtonClick(event)" 
              />
    
    <views:ExtendedTextInput id="enumKey" text="@{(data as EnumDescriptor).key}" maxChars="5" 
                             minWidth="60"
                             editable="{editable}" enabled="{enabled}"
                             prompt="key"
                             />
    
    <s:BorderContainer id="descBorder"
                       borderVisible="true" borderStyle="solid"
                       includeInLayout="{showLang}"
                       visible="{descBorder.includeInLayout}"
                       minHeight="0">
        <views:DescListItemRenderer id="descList"
                                    data="{(data as EnumDescriptor).descriptions}" 
                                    editable="{editable}" enabled="{enabled}"
                                    width="100%"
                                    prompt="value"
                                    showLang="{showLang}"
                                    />
        
    </s:BorderContainer>
    
    <!-- when no lang support -->
    <views:DescItemRenderer id="singleDesc"
                            data="{enumDescEntry}" 
                            editable="{editable}" enabled="{enabled}"
                            width="100%"
                            prompt="value"
                            showLang="{showLang}"
                            includeInLayout="{!showLang}"
                            visible="{singleDesc.includeInLayout}"
                            />
    
    
</s:ItemRenderer>